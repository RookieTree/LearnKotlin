package com.tree.learnkotlin


/*
 *  @项目名：  LearnKotlin 
 *  @包名：    com.tree.learnkotlin
 *  @文件名:   Lean6
 *  @创建者:   rookietree
 *  @创建时间:  2022/8/9 19:13
 *  @描述：    TODO
 */
class Learn6 {
    //拓展，主要分为两种语法：第一个是拓展函数，第二个是拓展属性
    //扩展函数：从类的外部拓展出来一个函数，这个函数看起来就像是类的成员函数一样。
    val l="laoliu".lastElement()
    var name="whs"
    val r=name.lastElement
    fun logLength(){
        print("1r:{$r}")
        name="whswhs"
        print("2r:{$r}")
    }
    //在kotlin当中，几乎所有的类都可以被拓展，甚至还包括第三方提供的java类。
    //唯有匿名内部类，由于它本身不存在名称，所以无法指定接收者类型，当然也没必要被拓展
    //拓展最主要的用途就是用来取代java当中的各种工具类，比如StringUtils、DateUtils等等

    //拓展的限制
    //1.拓展不是真正的类成员，所以无法被它的子类重写
    //2.拓展属性无法存储状态。
    //3.拓展的访问作用域仅限于两个地方。第一，定义处的成员；第二，接收者类型的公开成员
    /**
     * 如果扩展是顶层的扩展，那么扩展的访问域仅限于该 Kotlin 文件当中的所有成员，
     * 以及被扩展类型的公开成员，这种方式定义的扩展是可以被全局使用的。
     * 如果扩展是被定义在某个类当中的，那么该扩展的访问域仅限于该类当中的所有成员，
     * 以及被扩展类型的公开成员，这种方式定义的扩展仅能在该类当中使用。
     */

    /**
     * 总结：
     * Kotlin 的扩展，从语法角度来看，分为扩展函数和扩展属性。定义扩展的方式，只是比普通函数、属性多了一个“扩展接收者”而已。
     * 从作用域角度来看，分为顶层扩展和类内扩展。
     * 从本质上来看，扩展函数和扩展属性，它们都是 Java 静态方法，与 Java 当中的工具类别无二致。对比 Java 工具类，扩展最大的优势就在于，IDE 可以为我们提供代码补全功能。
     * 从能力的角度来看，Kotlin 扩展一共有三个限制，分别是：扩展无法被重写；扩展属性无法存储状态；扩展的作用域有限，无法访问私有成员。
     * 从使用场景的角度来看，Kotlin 扩展主要有两个使用场景，分别是：关注点分离，优化代码架构；消灭模板代码，提高可读性和开发效率。
     */
}
//拓展string的一个函数，因为没有放在任何类里，自身在最外层，所以叫顶层拓展
//lastElement()这个函数名是自定义的，String是拓展函数的接收方
fun String.lastElement():Char?{
    if(this.isEmpty()){
        return null
    }
    return this[length-1]
}
//拓展属性：在类的外部定义一个新的成员属性
val String.lastElement:Char?
    get() = if (isEmpty()){
        null
    }else{
        get(length-1)
    }